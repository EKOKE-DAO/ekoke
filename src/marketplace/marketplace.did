type AllowanceError = variant {
  AllowanceNotFound;
  BadSpender;
  AllowanceChanged;
  BadExpiration;
  AllowanceExpired;
  InsufficientFunds;
};
type ApproveError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  AllowanceChanged : record { current_allowance : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  Expired : record { ledger_time : nat64 };
  InsufficientFunds : record { balance : nat };
};
type BalanceError = variant { AccountNotFound; InsufficientBalance };
type BuyError = variant {
  TokenHasNoOwner;
  IcpAllowanceNotEnough;
  CallerAlreadyOwnsToken;
  IcpAllowanceExpired;
};
type ConfigurationError = variant { AdminsCantBeEmpty; AnonymousAdmin };
type ConfigurationError_1 = variant {
  CustodialsCantBeEmpty;
  AnonymousCustodial;
};
type DeferredError = variant {
  Nft : NftError;
  Ekoke : EkokeError;
  Withdraw : WithdrawError;
  Configuration : ConfigurationError_1;
  Unauthorized;
  Token : TokenError;
  StorageError;
  CanisterCall : record { RejectionCode; text };
};
type EcdsaError = variant {
  RecoveryIdError;
  InvalidSignature;
  InvalidPublicKey;
};
type EkokeError = variant {
  Configuration : ConfigurationError;
  Icrc2Approve : ApproveError;
  Icrc1Transfer : TransferError;
  Pool : PoolError;
  Allowance : AllowanceError;
  Register : RegisterError;
  EthRpcError : record { int32; text };
  XrcError;
  StorageError;
  CanisterCall : record { RejectionCode; text };
  Balance : BalanceError;
  Icrc2Transfer : TransferFromError;
  Ecdsa : EcdsaError;
};
type MarketplaceError = variant {
  Buy : BuyError;
  Configuration : ConfigurationError;
  Icrc1Transfer : TransferError;
  DeferredCanister : DeferredError;
  TokenNotFound;
  EkokeCanister : EkokeError;
  XrcError : text;
  StorageError;
  CanisterCall : record { RejectionCode; text };
  Dip721 : NftError;
  Icrc2Transfer : TransferFromError;
};
type MarketplaceInitData = record {
  deferred_canister : principal;
  icp_ledger_canister : principal;
  ekoke_liquidity_pool_canister : principal;
  xrc_canister : principal;
  ekoke_reward_pool_canister : principal;
  admins : vec principal;
};
type NftError = variant {
  UnauthorizedOperator;
  SelfTransfer;
  TokenNotFound;
  UnauthorizedOwner;
  TxNotFound;
  SelfApprove;
  OperatorNotFound;
  ExistedNFT;
  OwnerNotFound;
  Other : text;
};
type PoolError = variant { PoolNotFound : nat; NotEnoughTokens };
type RegisterError = variant { TransactionNotFound };
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok; Err : MarketplaceError };
type Result_1 = variant { Ok : nat64; Err : MarketplaceError };
type TokenError = variant {
  ContractAlreadySigned : nat;
  ContractValueIsNotMultipleOfInstallments;
  TokenAlreadyExists : nat;
  BadBuyerDepositAccount;
  TokensMismatch;
  ContractAlreadyExists : nat;
  ContractTokensShouldBeEmpty;
  TokenDoesNotBelongToContract : nat;
  DepositAllowanceExpired;
  TokenNotFound : nat;
  DepositAllowanceNotEnough : record { available : nat; required : nat };
  ContractSellerQuotaIsNot100;
  DepositRejected : TransferFromError;
  ContractNotFound : nat;
  CannotCloseContract;
  ContractValueIsLessThanDeposit;
  ContractNotSigned : nat;
  ContractHasNoSeller;
  ContractHasNoBuyer;
  BadContractExpiration;
  ContractHasNoTokens;
  TokenIsBurned : nat;
  BadMintTokenOwner : nat;
  BadContractProperty;
};
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  InsufficientAllowance : record { allowance : nat };
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type WithdrawError = variant {
  InvalidTransferAmount : record { nat64; nat8 };
  ContractNotFound : nat;
  DepositTransferFailed : TransferError;
  ContractNotPaid : nat;
};
service : (MarketplaceInitData) -> {
  admin_cycles : () -> (nat) query;
  admin_set_admins : (vec principal) -> (Result);
  admin_set_deferred_canister : (principal) -> ();
  admin_set_ekoke_liquidity_pool_canister : (principal) -> (Result);
  admin_set_ekoke_reward_pool_canister : (principal) -> (Result);
  admin_set_icp_ledger_canister : (principal) -> ();
  admin_set_interest_rate_for_buyer : (float64) -> ();
  admin_set_xrc_canister : (principal) -> ();
  buy_token : (nat, opt blob) -> (Result);
  get_token_price_icp : (nat) -> (Result_1);
}