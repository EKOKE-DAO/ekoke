type Account = record { owner : principal; subaccount : opt vec nat8 };
type BalanceError = variant { AccountNotFound };
type ConfigurationError = variant { AdminsCantBeEmpty; AnonymousAdmin };
type FlyError = variant {
  Configuration : ConfigurationError;
  Pool : PoolError;
  StorageError;
  Balance : BalanceError;
};
type FlyInitData = record {
  minting_account : principal;
  initial_balances : vec record { Account; nat64 };
  admins : vec principal;
  total_supply : nat64;
};
type PoolError = variant { PoolNotFound : nat; NotEnoughTokens };
type Result = variant { Ok; Err : FlyError };
type Result_1 = variant { Ok : nat64; Err : FlyError };
type Role = variant { Admin };
service : (FlyInitData) -> {
  admin_remove_role : (principal, Role) -> (Result);
  admin_set_role : (principal, Role) -> ();
  reserve_pool : (nat, nat64) -> (Result_1);
}