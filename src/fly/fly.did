type Account = record { owner : principal; subaccount : opt vec nat8 };
type BalanceError = variant { AccountNotFound; InsufficientBalance };
type ConfigurationError = variant { AdminsCantBeEmpty; AnonymousAdmin };
type FlyError = variant {
  Configuration : ConfigurationError;
  Pool : PoolError;
  Register : RegisterError;
  StorageError;
  Balance : BalanceError;
};
type FlyInitData = record {
  initial_balances : vec record { Account; nat };
  dilazionato_canister : principal;
  admins : vec principal;
  total_supply : nat64;
};
type PoolError = variant { PoolNotFound : nat; NotEnoughTokens };
type RegisterError = variant { TransactionNotFound };
type Result = variant { Ok; Err : FlyError };
type Result_1 = variant { Ok : nat; Err : FlyError };
type Result_2 = variant { Ok : Transaction; Err : FlyError };
type Role = variant { Admin; DilazionatoCanister };
type Transaction = record {
  to : Account;
  fee : nat;
  from : Account;
  memo : opt vec nat8;
  created_at : nat64;
  amount : nat;
};
service : (FlyInitData) -> {
  admin_burn : (nat) -> (Result);
  admin_cycles : () -> (nat) query;
  admin_remove_role : (principal, Role) -> (Result);
  admin_set_role : (principal, Role) -> ();
  get_contract_reward : (nat, nat) -> (Result_1);
  get_transaction : (nat64) -> (Result_2) query;
  reserve_pool : (Account, nat, nat) -> (Result_1);
}