type Account = record { owner : principal; subaccount : opt vec nat8 };
type Approve = record {
  fee : opt nat;
  from : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
  expected_allowance : opt nat;
  expires_at : opt nat64;
  spender : opt Account;
};
type Box = variant {
  Int : int;
  Map : vec record { text; Box };
  Nat : nat;
  Nat64 : nat64;
  Blob : vec nat8;
  Text : text;
  Array : Vec;
};
type Burn = record {
  from : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
  spender : opt Account;
};
type EkokeArchiveInitData = record {
  ledger_id : principal;
  index_id : principal;
};
type GetBlocksArg = record { start : nat; length : nat };
type GetBlocksRet = record { blocks : vec Value };
type GetTransactionsRet = record { transactions : vec Transaction };
type Mint = record {
  to : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
};
type Transaction = record {
  burn : opt Burn;
  kind : text;
  mint : opt Mint;
  approve : opt Approve;
  timestamp : nat64;
  transfer : opt Transfer;
};
type Transfer = record {
  to : Account;
  fee : opt nat;
  from : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
  spender : opt Account;
};
type Value = variant {
  Int : int;
  Map : vec record { text; Box };
  Nat : nat;
  Nat64 : nat64;
  Blob : vec nat8;
  Text : text;
  Array : Vec;
};
type Vec = vec variant {
  Int : int;
  Map : vec record { text; Box };
  Nat : nat;
  Nat64 : nat64;
  Blob : vec nat8;
  Text : text;
  Array : Vec;
};
service : (EkokeArchiveInitData) -> {
  append_blocks : (vec vec nat8) -> ();
  commit : (Transaction) -> (nat64);
  get_blocks : (GetBlocksArg) -> (GetBlocksRet) query;
  get_transaction : (nat64) -> (opt Transaction) query;
  get_transactions : (GetBlocksArg) -> (GetTransactionsRet) query;
  remaining_capacity : () -> (nat64) query;
}