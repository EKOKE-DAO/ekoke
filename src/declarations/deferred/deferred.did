type Account = record { owner : principal; subaccount : opt blob };
type Agency = record {
  vat : text;
  region : text;
  zip_code : text;
  country : text;
  agent : text;
  city : text;
  logo : opt text;
  name : text;
  continent : Continent;
  email : text;
  website : text;
  address : text;
  mobile : text;
};
type AllowanceError = variant {
  AllowanceNotFound;
  BadSpender;
  AllowanceChanged;
  BadExpiration;
  AllowanceExpired;
  InsufficientFunds;
};
type ApproveError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  AllowanceChanged : record { current_allowance : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  Expired : record { ledger_time : nat64 };
  InsufficientFunds : record { balance : nat };
};
type BalanceError = variant { AccountNotFound; InsufficientBalance };
type Buyers = record { deposit_account : Account; principals : vec principal };
type CloseContractError = variant {
  ContractPaid : nat;
  LiquidityPoolHasNotEnoughIcp : record { available : nat; required : nat };
  ContractNotFound : nat;
  ContractNotExpired : nat;
  RefundInvestors : TransferError;
  DepositTransferFailed : TransferError;
};
type ConfigurationError = variant { AdminsCantBeEmpty; AnonymousAdmin };
type ConfigurationError_1 = variant {
  CustodialsCantBeEmpty;
  AnonymousCustodial;
};
type Continent = variant {
  Africa;
  Antarctica;
  Asia;
  Europe;
  SouthAmerica;
  Oceania;
  NorthAmerica;
};
type Contract = record {
  id : nat;
  value : nat64;
  "type" : ContractType;
  is_signed : bool;
  agency : opt Agency;
  restricted_properties : vec record { text; RestrictedProperty };
  properties : vec record { text; GenericValue };
  deposit : Deposit;
  sellers : vec Seller;
  expiration : text;
  tokens : vec nat;
  currency : text;
  installments : nat64;
  initial_value : nat64;
  buyers : vec principal;
};
type ContractRegistration = record {
  value : nat64;
  "type" : ContractType;
  restricted_properties : vec record { text; RestrictedProperty };
  properties : vec record { text; GenericValue };
  deposit : Deposit;
  sellers : vec Seller;
  expiration : text;
  currency : text;
  installments : nat64;
  buyers : Buyers;
};
type ContractType = variant { Sell; Financing };
type DeferredError = variant {
  Nft : NftError;
  Ekoke : EkokeError;
  Withdraw : WithdrawError;
  Configuration : ConfigurationError_1;
  Deposit : DepositError;
  CloseContract : CloseContractError;
  Unauthorized;
  Token : TokenError;
  StorageError;
  CanisterCall : record { RejectionCode; text };
};
type DeferredInitData = record {
  icp_ledger_canister : principal;
  custodians : vec principal;
  ekoke_reward_pool_canister : principal;
  liquidity_pool_canister : principal;
  marketplace_canister : principal;
};
type Deposit = record { value_fiat : nat64; value_icp : nat64 };
type DepositError = variant {
  Rejected : TransferFromError;
  AllowanceNotEnough : record { available : nat; required : nat };
  AllowanceExpired;
};
type EcdsaError = variant {
  RecoveryIdError;
  InvalidSignature;
  InvalidPublicKey;
};
type EkokeError = variant {
  Configuration : ConfigurationError;
  Icrc2Approve : ApproveError;
  Icrc1Transfer : TransferError;
  Pool : PoolError;
  Allowance : AllowanceError;
  Register : RegisterError;
  EthRpcError : record { int32; text };
  XrcError;
  StorageError;
  CanisterCall : record { RejectionCode; text };
  Balance : BalanceError;
  Icrc2Transfer : TransferFromError;
  Ecdsa : EcdsaError;
};
type GenericValue = variant {
  Nat64Content : nat64;
  Nat32Content : nat32;
  BoolContent : bool;
  Nat8Content : nat8;
  Int64Content : int64;
  IntContent : int;
  NatContent : nat;
  Nat16Content : nat16;
  Int32Content : int32;
  Int8Content : int8;
  FloatContent : float64;
  Int16Content : int16;
  BlobContent : blob;
  NestedContent : vec record { text; GenericValue };
  Principal : principal;
  TextContent : text;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  upgrade : opt bool;
  status_code : nat16;
};
type Metadata = record {
  logo : opt text;
  name : opt text;
  created_at : nat64;
  upgraded_at : nat64;
  custodians : vec principal;
  symbol : opt text;
};
type NftError = variant {
  UnauthorizedOperator;
  SelfTransfer;
  TokenNotFound;
  UnauthorizedOwner;
  TxNotFound;
  SelfApprove;
  OperatorNotFound;
  ExistedNFT;
  OwnerNotFound;
  Other : text;
};
type PoolError = variant { PoolNotFound : nat; NotEnoughTokens };
type RegisterError = variant { TransactionNotFound };
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type RestrictedProperty = record {
  value : GenericValue;
  access_list : vec RestrictionLevel;
};
type RestrictionLevel = variant { Buyer; Seller; Agent };
type Result = variant { Ok; Err : DeferredError };
type Result_1 = variant { Ok : nat; Err : NftError };
type Result_2 = variant { Ok : bool; Err : NftError };
type Result_3 = variant { Ok : opt principal; Err : NftError };
type Result_4 = variant { Ok : vec nat; Err : NftError };
type Result_5 = variant { Ok : vec TokenMetadata; Err : NftError };
type Result_6 = variant { Ok : TokenMetadata; Err : NftError };
type Result_7 = variant { Ok : TxEvent; Err : NftError };
type Result_8 = variant { Ok : nat; Err : DeferredError };
type Role = variant { Custodian; Agent };
type Seller = record { "principal" : principal; quota : nat8 };
type Stats = record {
  cycles : nat;
  total_transactions : nat;
  total_unique_holders : nat;
  total_supply : nat;
};
type SupportedInterface = variant { Burn; Mint; Approval; TransactionHistory };
type Token = record {
  id : nat;
  transferred_at : opt nat64;
  transferred_by : opt principal;
  value : nat64;
  owner : opt principal;
  operator : opt principal;
  approved_at : opt nat64;
  approved_by : opt principal;
  contract_id : nat;
  ekoke_reward : nat;
  is_burned : bool;
  burned_at : opt nat64;
  burned_by : opt principal;
  minted_at : nat64;
  minted_by : principal;
};
type TokenError = variant {
  ContractAlreadySigned : nat;
  ContractValueIsNotMultipleOfInstallments;
  TokenAlreadyExists : nat;
  BadBuyerDepositAccount;
  TokensMismatch;
  ContractAlreadyExists : nat;
  ContractTokensShouldBeEmpty;
  TokenDoesNotBelongToContract : nat;
  TokenNotFound : nat;
  ContractSellerQuotaIsNot100;
  ContractNotFound : nat;
  CannotCloseContract;
  ContractValueIsLessThanDeposit;
  ContractNotSigned : nat;
  ContractHasNoSeller;
  ContractHasNoBuyer;
  BadContractExpiration;
  ContractHasNoTokens;
  TokenIsBurned : nat;
  BadMintTokenOwner : nat;
  BadContractProperty;
};
type TokenInfo = record { token : Token; contract : Contract };
type TokenMetadata = record {
  transferred_at : opt nat64;
  transferred_by : opt principal;
  owner : opt principal;
  operator : opt principal;
  approved_at : opt nat64;
  approved_by : opt principal;
  properties : vec record { text; GenericValue };
  is_burned : bool;
  token_identifier : nat;
  burned_at : opt nat64;
  burned_by : opt principal;
  minted_at : nat64;
  minted_by : principal;
};
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  InsufficientAllowance : record { allowance : nat };
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TxEvent = record {
  time : nat64;
  operation : text;
  details : vec record { text; GenericValue };
  caller : principal;
};
type WithdrawError = variant {
  InvalidTransferAmount : record { nat64; nat8 };
  ContractNotFound : nat;
  DepositTransferFailed : TransferError;
  ContractNotPaid : nat;
};
service : (DeferredInitData) -> {
  admin_register_agency : (principal, Agency) -> ();
  admin_remove_role : (principal, Role) -> (Result);
  admin_set_ekoke_liquidity_pool_canister : (principal) -> ();
  admin_set_ekoke_reward_pool_canister : (principal) -> ();
  admin_set_marketplace_canister : (principal) -> ();
  admin_set_role : (principal, Role) -> ();
  close_contract : (nat) -> (Result);
  dip721_approve : (principal, nat) -> (Result_1);
  dip721_balance_of : (principal) -> (Result_1) query;
  dip721_burn : (nat) -> (Result_1);
  dip721_custodians : () -> (vec principal) query;
  dip721_cycles : () -> (nat) query;
  dip721_is_approved_for_all : (principal, principal) -> (Result_2);
  dip721_logo : () -> (opt text) query;
  dip721_metadata : () -> (Metadata) query;
  dip721_mint : (principal, nat, vec record { text; GenericValue }) -> (
      Result_1,
    );
  dip721_name : () -> (opt text) query;
  dip721_operator_of : (nat) -> (Result_3) query;
  dip721_operator_token_identifiers : (principal) -> (Result_4) query;
  dip721_operator_token_metadata : (principal) -> (Result_5) query;
  dip721_owner_of : (nat) -> (Result_3) query;
  dip721_owner_token_identifiers : (principal) -> (Result_4) query;
  dip721_owner_token_metadata : (principal) -> (Result_5) query;
  dip721_set_approval_for_all : (principal, bool) -> (Result_1);
  dip721_set_custodians : (vec principal) -> ();
  dip721_set_logo : (text) -> ();
  dip721_set_name : (text) -> ();
  dip721_set_symbol : (text) -> ();
  dip721_stats : () -> (Stats) query;
  dip721_supported_interfaces : () -> (vec SupportedInterface) query;
  dip721_symbol : () -> (opt text) query;
  dip721_token_metadata : (nat) -> (Result_6) query;
  dip721_total_supply : () -> (nat) query;
  dip721_total_transactions : () -> (nat) query;
  dip721_total_unique_holders : () -> (nat) query;
  dip721_transaction : (nat) -> (Result_7) query;
  dip721_transfer : (principal, nat) -> (Result_1);
  dip721_transfer_from : (principal, principal, nat) -> (Result_1);
  get_agencies : () -> (vec Agency) query;
  get_contract : (nat) -> (opt Contract) query;
  get_restricted_contract_properties : (nat) -> (
      opt vec record { text; RestrictedProperty },
    ) query;
  get_signed_contracts : () -> (vec nat) query;
  get_token : (nat) -> (opt TokenInfo) query;
  get_unsigned_contracts : () -> (vec nat) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  increment_contract_value : (nat, nat64, nat64) -> (Result);
  register_contract : (ContractRegistration) -> (Result_8);
  remove_agency : (principal) -> (Result);
  sign_contract : (nat) -> (Result);
  update_contract_buyers : (nat, vec principal) -> (Result);
  update_contract_property : (nat, text, GenericValue) -> (Result);
  update_restricted_contract_property : (nat, text, RestrictedProperty) -> (
      Result,
    );
  withdraw_contract_deposit : (nat, opt blob) -> (Result);
}