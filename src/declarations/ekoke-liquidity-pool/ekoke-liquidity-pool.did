type Account = record { owner : principal; subaccount : opt blob };
type AllowanceError = variant {
  AllowanceNotFound;
  BadSpender;
  AllowanceChanged;
  BadExpiration;
  AllowanceExpired;
  InsufficientFunds;
};
type ApproveError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  AllowanceChanged : record { current_allowance : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  Expired : record { ledger_time : nat64 };
  InsufficientFunds : record { balance : nat };
};
type BalanceError = variant { AccountNotFound; InsufficientBalance };
type ConfigurationError = variant { AdminsCantBeEmpty; AnonymousAdmin };
type EcdsaError = variant {
  RecoveryIdError;
  InvalidSignature;
  InvalidPublicKey;
};
type EkokeError = variant {
  Configuration : ConfigurationError;
  Icrc2Approve : ApproveError;
  Icrc1Transfer : TransferError;
  Pool : PoolError;
  Allowance : AllowanceError;
  Register : RegisterError;
  EthRpcError : record { int32; text };
  XrcError;
  StorageError;
  CanisterCall : record { RejectionCode; text };
  Balance : BalanceError;
  Icrc2Transfer : TransferFromError;
  Ecdsa : EcdsaError;
};
type EkokeLiquidityPoolInitData = record {
  deferred_canister : principal;
  icp_ledger_canister : principal;
  admins : vec principal;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  upgrade : opt bool;
  status_code : nat16;
};
type LiquidityPoolAccounts = record { icp : Account };
type LiquidityPoolBalance = record { icp : nat };
type PoolError = variant { PoolNotFound : nat; NotEnoughTokens };
type RegisterError = variant { TransactionNotFound };
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok; Err : WithdrawError };
type Result_1 = variant { Ok : LiquidityPoolBalance; Err : EkokeError };
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  InsufficientAllowance : record { allowance : nat };
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type WithdrawError = variant {
  NothingToWithdraw : principal;
  Transfer : TransferError;
  CanisterCall : record { RejectionCode; text };
};
service : (EkokeLiquidityPoolInitData) -> {
  admin_cycles : () -> (nat) query;
  admin_set_admins : (vec principal) -> ();
  admin_set_deferred_canister : (principal) -> ();
  admin_set_icp_ledger_canister : (principal) -> ();
  admin_withdraw_icp : (Account, nat) -> (Result);
  create_refunds : (vec record { principal; nat }) -> ();
  http_request : (HttpRequest) -> (HttpResponse) query;
  liquidity_pool_accounts : () -> (LiquidityPoolAccounts) query;
  liquidity_pool_balance : () -> (Result_1) query;
  withdraw_refund : (opt blob) -> (Result);
}