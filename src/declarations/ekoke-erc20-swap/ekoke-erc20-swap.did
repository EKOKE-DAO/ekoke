type AllowanceError = variant {
  AllowanceNotFound;
  BadSpender;
  AllowanceChanged;
  BadExpiration;
  AllowanceExpired;
  InsufficientFunds;
};
type ApproveError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  AllowanceChanged : record { current_allowance : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  Expired : record { ledger_time : nat64 };
  InsufficientFunds : record { balance : nat };
};
type BalanceError = variant { AccountNotFound; InsufficientBalance };
type ConfigurationError = variant { AdminsCantBeEmpty; AnonymousAdmin };
type EcdsaError = variant {
  RecoveryIdError;
  InvalidSignature;
  InvalidPublicKey;
};
type EkokeErc20SwapInitData = record {
  cketh_ledger_canister : principal;
  erc20_bridge_address : text;
  erc20_network : EthNetwork;
  ledger_id : principal;
  admins : vec principal;
  erc20_gas_price : nat64;
  cketh_minter_canister : principal;
};
type EkokeError = variant {
  Configuration : ConfigurationError;
  Icrc2Approve : ApproveError;
  Icrc1Transfer : TransferError;
  Pool : PoolError;
  Allowance : AllowanceError;
  Register : RegisterError;
  EthRpcError : record { int32; text };
  XrcError;
  StorageError;
  CanisterCall : record { RejectionCode; text };
  Balance : BalanceError;
  Icrc2Transfer : TransferFromError;
  Ecdsa : EcdsaError;
};
type EthNetwork = variant { Ethereum; Goerli; Sepolia };
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : vec nat8;
  headers : vec HttpHeader;
};
type PoolError = variant { PoolNotFound : nat; NotEnoughTokens };
type RegisterError = variant { TransactionNotFound };
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : text; Err : EkokeError };
type Result_1 = variant { Ok : nat64; Err : EkokeError };
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  InsufficientAllowance : record { allowance : nat };
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TransformArgs = record { context : vec nat8; response : HttpResponse };
service : (EkokeErc20SwapInitData) -> {
  admin_cycles : () -> (nat) query;
  admin_eth_wallet_address : () -> (text) query;
  admin_set_admins : (vec principal) -> ();
  admin_set_cketh_ledger_canister : (principal) -> ();
  admin_set_cketh_minter_canister : (principal) -> ();
  admin_set_erc20_bridge_address : (text) -> ();
  admin_set_erc20_gas_price : (nat64) -> ();
  admin_set_ledger_canister : (principal) -> ();
  http_transform_send_tx : (TransformArgs) -> (HttpResponse) query;
  swap : (text, nat, opt vec nat8) -> (Result);
  swap_fee : () -> (Result_1);
}